'use strict';

/*
 *
 * Copyright(c) 2011 Vladimir Dronnikov <dronnikov@gmail.com>
 * MIT Licensed
 *
 */

(function(undefined) {

function nonce() {
	return Math.random().toString().substring(2);
}

var SERVER_SID = nonce();

var THIS_IS_FUNC = '~-=(){}=-~';
var THIS_IS_FUNC_LEN = THIS_IS_FUNC.length;

function normalize(options) {

	this.context = this.fns = this.cbs = {};

	console.log('JOINED');

	//
	// `this` has been connected
	// N.B. introduced to normalize client/server
	//
	this.on('connect', function() {
		console.log('CONNN');
	});

	//
	// `this` has been disconnected
	//
	this.on('disconnect', function() {
		console.log('LEFT');
		// flush `this` capability
		this.context = this.fns = this.cbs = {};
	});

	//
	// message for `this` arrived
	//
	this.on('message', handler.bind(this));

	//
	// `this` context is set
	//
	this.on('context', function() {
		console.log('CONTEXT', this.context);
	});

	//
	//
	//
	this.extend = function(context, flush) {
		registerContext.call(this, context, flush);
	};

	return this;
}

function respond(id, error, result) {
	console.log('RESPONDED', arguments);
	if (!id) return;
	this.send({
		cmd: 'reply',
		id: id,
		error: error || null,
		result: result
	});
}

function registerFunction(fid) {
	var self = this;
	return function(callback/*, params...*/) {
		// register callback
		if (_.isFunction(callback)) {
			// N.B. callbacks are deleted once they are fired. if a callback is fired, it holds the memory.
			// we should introduce expiration for callbacks
			var id = nonce();
			self.cbs[id] = callback;
		}
		// RPC
		var msg = {cmd: 'call', id: id, method: fid, params: Array.prototype.slice.call(arguments, 1)};
		self.send(msg);
		//return id;
	};
}

function registerContext(context, flush) {
	var self = this;
	// reset functions
	self.fns = {};
	// reset or extend the context
	if (flush) {
		self.context = context || {};
	} else {
		// TODO: make deep merge?
		_.extend(self.context, context || {});
	}
	// use custom stringifier with replacer to replace functions by THIS_IS_FUNC signature.
	// also assign an unique id to any function in the context
	self.send('~j~'+JSON.stringify({
		cmd: 'set context',
		data: self.context
	}, function(k, v) {
		if (_.isFunction(v)) {
			var fid = nonce();
			self.fns[fid] = v;
			v = THIS_IS_FUNC + fid;
		}
		return v;
	}));
}

//
// websocket message handler
//
function handler(message) {
	var self = this;
	console.log('MESSAGE', message);
	if (!message) return;
	var fn;
	// remote side calls this side's function
	if (message.cmd === 'call' && typeof message.method === 'string' && (fn = self.fns[message.method])) {
		var args = [self.context, respond.bind(self, message.id)].concat(message.params || []);
		fn.apply(null, args);
	// this side receives remote side reply
	// FIXME: we can't rely on reply being received, so some kind of callbacks reaper is needed
	} else if (message.cmd === 'reply' && message.id) {
		if (fn = self.cbs[message.id]) {
			delete self.cbs[message.id]; // FIXME: remove only anon callbacks, i.e. guard with if (!fn.name)
			fn.call(null, message.error, message.result);
		}
	// remote side requests the context
	} else if (message.cmd === 'get context' && self.getContext) {
		self.getContext(message.sid, function(err, result) {
			registerContext.call(self, result, true);
		});
	// this side receives the requested context
	} else if (message.cmd === 'set context') {
		// reset callbacks
		self.cbs = {};
		// reparse message data with custom reviver to honor functions stringified as THIS_IS_FUNC signatures
		try {
			self.context = JSON.parse(JSON.stringify(message.data), function(k, v) {
				if (v && typeof v === 'string' && v.substring(0, THIS_IS_FUNC_LEN) === THIS_IS_FUNC) {
					var fid = v.substring(THIS_IS_FUNC_LEN);
					v = registerFunction.call(self, fid);
				}
				return v;
			});
		} catch(err) {
			self.context = {};
		}
		// signal 'context is ready'
		self.emit('context', [self.context]);
	}
}

//
// setup websocket communication
//

if (typeof window !== 'undefined') {

	//
	// browser
	//

	window.comm = new io.Socket(null, {
		port: location.port,
		secure: location.protocol === 'https:',
		//transports: ['websocket', 'flashsocket'],
		rememberTransport: false
	});
	normalize.call(comm, {});
	comm.on('connect', function() {
		// request context from remote end
		// N.B. to authorize the client we reuse 'sid' cookie from the HTTP request
		var sid = document.cookie.match(new RegExp('(?:^|;) *' + 'sid' + '=([^;]*)')); sid = sid && sid[1] || '';
		this.send({cmd: 'get context', sid: sid});
		// define additional helpers
		// ...
	});
	// expose context once it's received
	comm.on('context', function(context) {
		//window.context = context;
		//context.__proto__.extend = comm.extend.bind(comm);
	});
	comm.connect();

} else {

	//
	// server
	//

	module.exports = function(server, getContext) {

		var io = require('socket.io');
		var socket = io.listen(server);

		socket.on('connection', function(comm) {
			normalize.call(comm, {});
			comm.getContext = getContext;
			comm.send({cmd: 'get context', sid: SERVER_SID});
		});

		Object.defineProperties(socket, {
			everyone: {
				get: function() {
					return _.toArray(this.clients);
				}
			}
		});

		// simplest client filter: by context.group
		// N.B. socket.group() returns array of all clients
		socket.group = function(name) {
			return _.filter(this.clients, function(client, cid) {
				return client.context.group === name;
			});
		};

		/*socket.invoke = function(name, path, args) {
			_.each(this.group(name), function(client) {
				_.drill(client.context, path)
			});
		};*/

		return socket;
	};

}

})();
