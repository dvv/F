/*
var server = require('http').createServer(function(req, res) {
	res.writeHead(200);
	res.end('Bienvenuto!');
});
server.listen(3000);
*/

var F = require('../');
var config = require('./config');
//config.model = __dirname + '/model';
//var model = F.model.sync(F, config);
//console.log(model);


//
// given uid, return its capability
//
config.security.getCapability = function getCapability(uid, next) {
	next(null, {
		user: {
			id: uid,
		},
		Foo: {
			get: function() {
				console.log('GET FOO', arguments);
			}
		}
	});
};

//
// anonymous is welcome
//
config.security.checkCredentials = function checkCredentials(uid, pass, next) {
	next(null, uid);
};

//
// routes
//
config.routes = [
	['GET', '/', function(req, res, next) {
		//console.log('HERE', req.context);
		res.render('index', req.context);
	}],
];

//
// setup middleware
//
var middleware = F.stack.vanilla(__dirname, config);

//
// run HTTP server
//
if (config.server.port) {
	var http = require('http').createServer();
	http.on('request', middleware);
	http.listen(config.server.port);

	//
	// websocket
	//
	function respond(id, error, result) {
		console.log('CAP RESPONDED', arguments);
		if (!id) return;
		this.send({
			cmd: 'rpc',
			id: id,
			error: error || null,
			result: result
		});
	}

	var IO = require('socket.io');
	var socket = IO.listen(http);
	socket.on('connection', function(client) {
		// this === socket
		// `client` has been connected
		console.log("Joined: ", client.request.headers.cookie);
		//
		// setup the client
		//
		var caps = {
			user: {
				id: 'the user id'
			},
			Foo: {
				get: function(ctx, next, index) {
					console.log('GET FOO', arguments);
					typeof next === 'function' && next(null, 'FOO GOT' + Array.prototype.slice.call(arguments));
				}
			}
		};
		//
		// service events
		//
		client.on('disconnect', function() {
			// `this` client has been disconnected
			console.log("Left: ", this.clientId);
			// flush client capability
		});
		client.on('message', function(message) {
			// message from `this` client arrived
			console.log("Message from #" + this, message);
			if (!message) return;
			var fn;
			// basic JSON-RPC over websocket
			/*if (message.cmd === 'rpc' && typeof message.method === 'string' && (fn = _.drill(caps, message.method.split('.')))) {
				args.unshift(caps);
				args.push(respond.bind(this, message.id));
				fn.apply(null, args);
			}*/
			if (message.cmd === 'rpc' && typeof message.method === 'string' && (fn = fns[message.method])) {
				var args = [caps, respond.bind(this, message.id)].concat(message.params || []);
				fn.apply(null, args);
			}
		});
		//
		// setup client capability
		//
		var fns = {};
		client.send('~j~'+JSON.stringify({
			cmd: 'set context',
			data: caps
		}, function(k,v) {
			if (typeof v === 'function') {
				var fid = Math.random().toString().substring(2);
				fns[fid] = v;
				v = '~f~' + fid;
			}
			return v;
		}));
		//console.log('FIDS', fns);
	});

	// REPL for tests
	var repl = require('repl').start('node> ');
	process.stdin.on('close', process.exit);
	repl.context.socket = socket;
}
