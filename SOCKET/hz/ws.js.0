'use strict';
(function(undefined) {

function nonce() {
	return Math.random().toString().substring(2);
}

var fns = {};
var cbs = {};

function exposeCallback(fn) {
	var id = nonce();
	cbs[id] = fn;
	return id;
}

function exposeFunction(fn) {
	var id = nonce();
	fns[id] = fn;
	return id;
}

function respond(id, error, result) {
	console.log('RESPONDED', arguments);
	if (!id) return;
	this.send({
		cmd: 'reply',
		id: id,
		error: error || null,
		result: result
	});
}

function handler(message) {
	var socket = this;
	console.log("Message from #" + this, message);
	if (!message) return;
	var fn;
	// basic JSON-RPC over websocket
	if (message.cmd === 'call' && typeof message.method === 'string' && (fn = fns[message.method])) {
		var args = [this.context, respond.bind(this, message.id)].concat(message.params || []);
		fn.apply(null, args);
	} else if (message.cmd === 'reply' && message.id) {
		if (fn = cbs[message.id]) {
			delete cbs[message.id]; // FIXME: remove only anon callbacks?
			fn.call(null, message.error, message.result);
		}
	// remote side pushed the context
	} else if (message.cmd === 'set context') {
		// reset callbacks
		cbs = {};
		// reparse message data with custom reviver to honor passed functions
		// FIXME: should push to socket.io?
		this.context = JSON.parse(JSON.stringify(message.data), function(k, v) {
			if (v && typeof v === 'string' && v.substring(0, 3) === '~f~') {
				var fid = v.substring(3);
				v = function(callback/*, params...*/) {
					var id = exposeCallback(callback);
					var msg = {cmd: 'call', id: id, method: fid, params: Array.prototype.slice.call(arguments, 1)};
					socket.send(msg);
					//return id;
				};
			}
			return v;
		});
		console.log('CONTEXT', this.context);
	}
}

//
// setup
//
if (typeof window !== 'undefined') {

	//
	// websocket client
	//
	var remote = new io.Socket(null, {
		port: location.port,
		secure: location.protocol === 'https:',
		//transports: ['websocket', 'flashsocket'],
		rememberTransport: false
	});
	// no transport? -> punt on this, fallback is ok
	////if (!remote.transport) return ready();
	window.context = remote.context;
	remote.on('connect', function() {
		console.log('CONNECTED', arguments);
		// define helpers
		// ...
	});
	remote.on('disconnect', function() {
		console.log('DISCONNECTED', arguments);
		// reset context
		this.context = cbs = {};
	});
	//
	// message from `this` remote arrived
	//
	remote.on('message', handler.bind(remote));

	remote.connect();

} else {

	//
	// websocket server
	//

	module.exports = function(server, getContext) {

		var IO = require('socket.io');
		var socket = IO.listen(server);

		socket.on('connection', function(remote) {

			remote.context = {};

			// this === socket
			// `remote` has been connected
			console.log('JOINED: ', '???');

			//
			// `this` remote has been connected
			// N.B. introduced to normalize client/server
			//
			remote.on('connect', function() {
				console.log('CONNN: ', '???');
			});

			//
			// `this` remote has been disconnected
			//
			remote.on('disconnect', function() {
				console.log('LEFT: ', '???');
				// TODO: flush remote capability
			});

			//
			// message from `this` remote arrived
			//
			remote.on('message', handler.bind(remote));

			//
			// expose context to remote
			//
			// N.B. to authorize the client we reuse 'sid' cookie from the HTTP request
			var sid = remote.request.headers.cookie.match(new RegExp('(?:^|;) *' + 'sid' + '=([^;]*)')); sid = sid && sid[1] || '';
			getContext(sid, function(err, result) {
				//console.log('CTX', arguments);
				remote.context = result;
				// use custom stringifier with replacer to replace functions by '~f~' signatures.
				// these signatures will be revived by custom parser at the remote end as real functions
				remote.send('~j~'+JSON.stringify({
					cmd: 'set context',
					data: remote.context
				}, function(k, v) {
					if (typeof v === 'function') {
						var fid = exposeFunction(v);
						v = '~f~' + fid;
					}
					return v;
				}));
			});

		});

		return socket;
	};

}

})();
