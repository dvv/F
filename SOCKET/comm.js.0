'use strict';

/*
 *
 * Copyright(c) 2011 Vladimir Dronnikov <dronnikov@gmail.com>
 * MIT Licensed
 *
 */

//
// depends on _ to normalize JS engines
// we recommend you to look at ender.js
//

(function(undefined) {

//
// in browser?
//
var CLIENT_SIDE = typeof window !== 'undefined';

//
// simple nonce generator
//
function nonce() {
	//return Math.random().toString().substring(2);
	return (Date.now() & 0x7fff).toString(36) + Math.floor(Math.random() * 1e9).toString(36) + Math.floor(Math.random() * 1e9).toString(36) + Math.floor(Math.random() * 1e9).toString(36);
}

//
// safely determine whether `prop` is an own property of `obj`
//
function has(obj, prop) {
	return Object.prototype.hasOwnProperty.call(obj, prop);
}

var slice = Array.prototype.slice;
var push = Array.prototype.push;

//
// safely get a deep property of `obj` descending using elements in `path`
//
function drill(obj, path) {
	if (_.isArray(path)) {
		for (var i = 0, l = path.length; i < l; i++) {
			part = path[i];
			obj = obj && has(obj, part) && obj[part] || null;
		}
		return obj;
	} else if (path == null) {
		return obj;
	} else {
		return obj && has(obj, path) && obj[path] || null;
	}
}

//
// invoke deep method of `this` identified by `path` with optional parameters
//
function caller(path) {
	var fn = drill(this, path);
	_.isFunction(fn) && fn.apply(null, slice.call(arguments, 1));
}

//
// invoke `caller` for each element of `list` filtered with `filter`
//
function invoke(list, filter, path) {
	var args = slice.call(arguments, 2);
	if (_.isFunction(filter)) list = _.filter(list, filter);
	_.each(list, function(item) {
		caller.apply(item.context, args);
	});
}

//
// setup websocket communication
//

if (CLIENT_SIDE) {

	//
	// browser
	//

	// N.B. we export constructor, not singleton, to allow having multiple instances

	window.Comm = function Comm(host, options) {
		var self = this;
		// set default options
		if (!options) options = {};
		_.defaults(options, {
			port: location.port,
			secure: location.protocol === 'https:',
			rememberTransport: false
		});
		// create socket
		var comm = new io.Socket(host, options);

////////////////////////////////////////////////////////////////
//
//

	//
	// monkey patch io.Socket.prototype to support passing functions over the wire
	//

	!function(undefined) {

	//
	// constants
	//
	var THIS_IS_FUNC = '~-=(){}=-~';
	var THIS_IS_FUNC_LEN = THIS_IS_FUNC.length;

	//
	// register a uniquely identified wrapper to a remote function
	//
	function registerRemoteFunction(fid) {
		var self = this;
		var fn = function(callback /*, params...*/) {
			var args = slice.call(arguments);
			// register callback
			if (_.isFunction(callback)) {
				// consume one argument
				args.shift();
				// N.B. callbacks are deleted once they are fired. unless a callback is fired, it holds the memory.
				// we should introduce expiration for callbacks
				var id = nonce();
				self.cbs[id] = callback;
			}
			// RPC
			var msg = {cmd: 'call', id: id, method: fid, params: args};
			self.send(msg);
		};
		// mark function as remote, to inhibit passing to the remote end
		fn.id = fid;
		return fn;
	}

	//
	// replace functions with THIS_IS_FUNC signatures
	// and assign unique ids to functions in `msg`
	//
	var __send = io.Socket.prototype.send;
	io.Socket.prototype.send = function(msg /* N.B. overridden to support functions */) {
		var self = this;
		function replacer(k, v) {
			// N.B. reparsed functions (having ids) no pasaran
			if (_.isFunction(v) && !v.id) {
				// FIXME: should not prepend with `k` in production
				var fid = k + '_' + nonce();
				self.fns[fid] = v;
				v = THIS_IS_FUNC + fid;
			}
			return v;
		}
		var s = '~j~'+JSON.stringify(msg, replacer);
		//console.log('SEND', s);
		__send.call(this, s);
	}

	//
	// revive functions from THIS_IS_FUNC signatures
	//
	//var __onMessage = Transport.prototype._onMessage;
	//Transport.prototype._onMessage = function(msg /* N.B. overridden to support functions */) {
	//var __onMessage = io.Transport.prototype._onMessage;
	//io.Transport.prototype._onMessage = function(msg /* N.B. overridden to support functions */) {
	var __onMessage = comm.transport.constructor.prototype._onMessage;
	comm.transport.constructor.prototype._onMessage = function(msg /* N.B. overridden to support functions */) {
		if (msg.substring(0, 3) === '~j~') {
			//console.log('RECEIVED', msg);
			var self = this;
			this.base._onMessage(JSON.parse(msg.substring(3), function(k, v) {
				// register each function in the context
				// FIXME: shouldn't it be done in lazy way via getters?
				// FIXME: how portable is it in browsers then?
				if (v && typeof v === 'string' && v.substring(0, THIS_IS_FUNC_LEN) === THIS_IS_FUNC) {
					// extract function id
					var fid = v.substring(THIS_IS_FUNC_LEN);
					// register the wrapper function
					v = registerRemoteFunction.call(self, fid);
				}
				return v;
			}));
		} else {
			__onMessage.call(this, msg);
		}
	}

	}();

//
//
////////////////////////////////////////////////////////////////

		// N.B. we assign to comm.context, do not overwite, only mangle!
		comm.context = self;

		comm.cbs = {};
		comm.fns = {};

		// FIXME: won't be needed in production
		//
		Object.defineProperties(self, {
			//comm: {value: comm},
			comm: {get: function(){return comm;}},
			cbs: {value: comm.cbs}
		});
		//

		// register 'context' callback
		comm.cbs.context = function(error, context) {
			// setup context
			for (var i in self) delete self[i];
			_.extend(self, context);
			//// fire 'ready' callback
			_.isFunction(options.ready) && options.ready.call(self);
			//// fire 'context' event
			//$(self).emit('context');
		};

		comm.on('message', this.constructor.prototype.message);

		// make connection
		comm.connect();
	};



/////
	Comm.prototype.take = function(sid) {
		// N.B. to authorize the client we reuse 'sid' cookie from the HTTP request
		// N.B. this allows for any kind of external authentication
		//var sid = document.cookie.match(new RegExp('(?:^|;) *' + 'sid' + '=([^;]*)')); sid = sid && sid[1] || '';
		var sid = '123';
		var self = this;
		this.rpc('login', function(err, context) {
			console.log('LOGGED', this, arguments);
			if (!err) {
				for (var i in self) delete self[i];
				_.extend(self, context);
			}
		}, sid);
	};
	Comm.prototype.rpc = function(path, callback /*, args */) {
		console.log('CALL', arguments);
		var args = slice.call(arguments, 1);
		// register callback
		if (_.isFunction(callback)) {
			// consume one argument
			args.shift();
			// N.B. callbacks are deleted once they are fired. unless a callback is fired, it holds the memory.
			// we should introduce expiration for callbacks
			var id = nonce();
			this.cbs[id] = callback;
		}
		this.comm.send({
			cmd: 'call',
			id: id,
			method: path,
			params: args
		});
	};
/////


	function reply(id /*, args */) {
		console.log('REPLY', arguments);
		var args = slice.call(arguments, 1);
		if (!id) return;
		this.comm.send({
			cmd: 'reply',
			id: id,
			params: args
		});
	}
	Comm.prototype.message = function(message) {
		if (!message) return;
		console.log('MESSAGE', arguments, this, JSON.stringify(message));
		var fn;
		// remote side calls this side method
		if (message.cmd === 'call' && typeof message.method === 'string' && (fn = this.fns[message.method])) {
			// the signature is fixed: function(callback[, arg1[, arg2[, ...]]])
			// N.B. we will reply to caller only if message.id is given
			var args = [_.bind(reply, this, message.id)];
			// optional arguments come from message.params
			if (message.params) push.apply(args, message.params);
			fn.apply(this.context, args);
		// uniquely identified reply from the remote side arrived
		// given reply id, lookup and call corresponding callback
		} else if (message.cmd === 'reply' && message.id && (fn = this.cbs[message.id])) {
			// remove the callback to please GC
			//delete this.cbs[message.id];
			if (message.id !== 'context') delete this.cbs[message.id];
			// callback
			fn.apply(this.context, message.params);
		}
	};


} else {

	//
	// server
	//

}

})();
