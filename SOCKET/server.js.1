'use strict';

var F = require('../');
var config = require('./config');

//
// given user id and password, check if it's authenticated
// N.B. if user is authenticated, just return his id
//
config.security.checkCredentials = function(uid, pass, next) {
	// N.B. here anonymous is welcome
	typeof next === 'function' && next(null, uid);
};

//
// given user id, return his capability
//
//config.security.getCapability = function(uid, next) {
config.security.getCapability = function(uid) {
	var self = this;
	var caps = {
		user: {
			id: uid,
		},
		Foo: {
			get: function(next, index) {
				console.log('Foo.get', arguments);
				typeof next === 'function' && next(null, 'resulting');
			},
			Bar: {
				deep: function(next, index) {
					console.log('Foo.Bar.deep', arguments);
					typeof next === 'function' && next('erroring');
				}
			}
		},
		post: function(next, msg) {
			console.log('Post', self.invoke(null, 'ping', this.name + ' says ' + msg), arguments);
			typeof next === 'function' && next(null, 'ack');
		}
	};
	//typeof next === 'function' && next(null, caps);
	return caps;
};

//
// given session id, return the session
// N.B. for vanilla HTTP requests this is done is auth middleware
//
var Cookie = require('cookie-sessions');
function getContextAsync(sid, next) {
	var options = config.security.session;
	try {
		var session = Cookie.deserialize(options.secret, options.timeout, sid);
	} catch (err) {}
	//console.log('SESS', session);
	// session is good -> return it
	//
	//
	session = {uid: 'anonnymouse'};
	//
	//
	if (session && session.uid) {
		config.security.getCapability.call(this, session.uid, function(err, context) {
			//console.log('CAPS', arguments);
			typeof next === 'function' && next(err, context);
		});
	// null of forged session -> return empty session
	} else {
		typeof next === 'function' && next(null, {user: {}});
	}
}

function getContext(sid) {
	return config.security.getCapability.call(this, session.uid);
}

//
// routes
//
config.routes = [
	['GET', '/', function(req, res, next) {
		//console.log('HERE', req.context);
		res.render('index', req.context);
	}],
];

//
// setup middleware
//
var middleware = F.stack.vanilla(__dirname, config);

// REPL for tests
var repl = require('repl').start('node> ');
process.stdin.on('close', process.exit);

//
// run HTTP server
//
if (config.server.port) {
	var http = require('http').createServer();
	http.on('request', middleware);
	http.listen(config.server.port);
	// websocket
	var ws = require('./ws')(http, getContext);
	repl.context.ws = ws;
}

//
// reuse the middleware for HTTPS server
//
if (config.server.ssl) {
	var https = require('https').createServer({
		key: require('fs').readFileSync(config.server.ssl.key, 'utf8'),
		cert: require('fs').readFileSync(config.server.ssl.cert, 'utf8'),
		//ca: ...
	});
	https.on('request', middleware);
	https.listen(config.server.ssl.port);
	// websocket
	var wss = require('./ws')(https, getContext);
	repl.context.wss = wss;
}
